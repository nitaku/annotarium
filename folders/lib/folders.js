// Generated by CoffeeScript 1.10.0
(function() {
  var L, api_location, augment, cd, cd__, coerce, cut_path, decorate_file, el, ls, mkdir, open_folders, prop, redraw, reload, tipify, type, types;

  open_folders = [];

  tipify = function(d) {
    return d.labels.forEach(function(l) {
      if (l in types) {
        return d.type = l;
      }
    });
  };

  types = null;

  el = null;

  api_location = null;

  prop = function(d, p, def) {
    if (d.type in types && p in types[d.type]) {
      return types[d.type][p](d);
    } else {
      return def;
    }
  };

  type = function(d) {
    return {
      thumbnail: prop(d, 'thumbnail', null),
      icon: prop(d, 'icon', 'file-o'),
      tooltip: prop(d, 'tooltip', "Node " + d.id),
      label: prop(d, 'label', (d.node != null) && (d.node.label != null) ? d.node.label : d.id),
      href: prop(d, 'href', null)
    };
  };

  ls = function(cwd, cb) {
    return d3.json(api_location + "ls.js" + (cwd != null ? '?cwd=' + cwd : ''), function(data) {
      tipify(data.cwd);
      data.subnodes.forEach(tipify);
      return cb(data);
    });
  };

  window.folders = function(conf) {
    var bar, breadcrumb, create_cb, cwd, files_container, new_folder_btn, reload_btn, root_id, subfolders_container, up_btn;
    el = conf.el != null ? d3.select(conf.el) : d3.select('body');
    types = conf.types != null ? conf.types : {};
    root_id = conf.root_id != null ? conf.root_id : null;
    api_location = conf.api_location != null ? conf.api_location : '';
    el.classed('folders', true);
    create_cb = function(d) {
      var cwd_id;
      cwd_id = open_folders[open_folders.length - 1].cwd.id;
      return d3.xhr(api_location + "new_node.js?cwd_id=" + cwd_id + "&labels=" + (JSON.stringify(d.labels)) + "&props=" + (JSON.stringify(d.node))).post({}, function() {
        return reload();
      });
    };
    bar = el.append('div').attr({
      "class": 'bar'
    });
    reload_btn = bar.append('button').html('<i class="icon fa fa-fw fa-refresh"></i>').on('click', reload);
    up_btn = bar.append('button').html('<i class="icon fa fa-fw fa-level-up"></i>').on('click', cd__);
    breadcrumb = bar.append('div').attr({
      "class": 'breadcrumb'
    });
    cwd = el.append('div').attr({
      "class": 'cwd'
    });
    subfolders_container = cwd.append('div').attr({
      "class": 'subfolders_container'
    });
    files_container = cwd.append('div').attr({
      "class": 'files_container'
    });
    Object.keys(types).forEach(function(k) {
      var icon, t;
      t = types[k];
      if (t["new"] != null) {
        icon = t.icon != null ? t.icon() : 'file-o';
        return bar.append('button').html("<i class='icon fa fa-fw fa-" + icon + "'></i>").on('click', function() {
          return t["new"](create_cb);
        });
      }
    });
    new_folder_btn = bar.append('button').html('<i class="icon fa fa-fw fa-folder"></i>').on('click', mkdir);
    return ls(root_id, function(root) {
      open_folders.push(root);
      return redraw();
    });
  };

  cd = function(id) {
    return ls(id, function(sf) {
      open_folders.push(sf);
      return redraw();
    });
  };

  cd__ = function() {
    if (open_folders.length > 1) {
      open_folders.pop();
      return redraw();
    }
  };

  cut_path = function(folder) {
    if (open_folders.length === 1 || open_folders[open_folders.length - 1].cwd.id === folder.cwd.id) {
      redraw();
      return;
    }
    open_folders.pop();
    return cut_path(folder);
  };

  reload = function() {
    return ls(open_folders[open_folders.length - 1].cwd.id, function(f) {
      open_folders[open_folders.length - 1] = f;
      return redraw();
    });
  };

  redraw = function() {
    var cwd_data, enter_files, enter_previews, files, files_data, path_items, subfolders;
    cwd_data = open_folders[open_folders.length - 1];
    subfolders = el.select('.subfolders_container').selectAll('.subfolder').data(cwd_data.subnodes.filter(function(d) {
      return d.is_folder;
    }), function(d) {
      return d.id;
    });
    subfolders.enter().append('div').attr({
      "class": 'subfolder node'
    }).html(function(d) {
      var overlay;
      if (d.node.autoquery != null) {
        overlay = '<i class="fa fa-bolt fa-stack-1x fa-inverse"></i>';
      } else {
        overlay = '';
      }
      return "<span class='icon fa-stack'><i class='fa fa-folder fa-stack-2x'></i>" + overlay + "</span> " + (d.node.label != null ? d.node.label : d.id);
    }).on('click', function(d) {
      return cd(d.id);
    });
    subfolders.exit().remove();
    subfolders.order();
    files_data = cwd_data.subnodes.filter(function(d) {
      return !d.is_folder;
    });
    files = el.select('.files_container').selectAll('.file').data(files_data, function(d) {
      return d.id;
    });
    enter_files = files.enter().append('a').attr({
      "class": 'file node'
    });
    enter_previews = enter_files.append('div').attr({
      "class": 'preview'
    });
    enter_files.append('div').attr({
      "class": 'filename'
    });
    enter_files.each(augment);
    files.exit().remove();
    files.order();
    path_items = el.select('.breadcrumb').selectAll('.path_item').data(open_folders, function(d) {
      return d.cwd.id;
    });
    path_items.enter().append('div').attr({
      "class": 'path_item'
    }).html(function(d) {
      return "<span>" + (d.cwd.node.label != null ? d.cwd.node.label : d.cwd.id) + "</span>";
    }).on('click', function(d) {
      return cut_path(d);
    });
    return path_items.exit().remove();
  };

  mkdir = function() {
    var label;
    label = prompt('New folder name:', 'New Folder');
    if (label != null) {
      return d3.xhr(api_location + "mkdir.js?label=" + label + "&cwd_id=" + open_folders[open_folders.length - 1].cwd.id).post({}, function() {
        return reload();
      });
    }
  };

  augment = function(d) {
    var d3el;
    d3el = d3.select(this);
    if ((d.type != null) && (types[d.type].get_remote != null)) {
      return types[d.type].get_remote(d, function(remote) {
        d.remote = remote;
        return decorate_file(d3el);
      });
    } else {
      return decorate_file(d3el);
    }
  };

  decorate_file = function(file) {
    file.attr({
      title: function(d) {
        return type(d).tooltip;
      },
      href: function(d) {
        return type(d).href;
      }
    });
    file.select('.preview').style({
      'background-image': function(d) {
        if (type(d).thumbnail != null) {
          return "url(" + (encodeURI(type(d).thumbnail)) + ")";
        } else {
          return null;
        }
      }
    }).html(function(d) {
      if (type(d).thumbnail == null) {
        return "<i class='icon fa fa-4x fa-" + (type(d).icon) + "'></i>";
      } else {
        return '';
      }
    });
    return file.select('.filename').html(function(d) {
      return "<span>" + (coerce(type(d).label)) + "</span>";
    });
  };

  L = 28;

  coerce = function(txt) {
    if (txt.length > L) {
      return txt.slice(0, L - 3) + '...';
    } else {
      return txt;
    }
  };

}).call(this);
