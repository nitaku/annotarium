// Generated by CoffeeScript 1.10.0
(function() {
  var ls, neo;

  neo = require('/var/www/folders/api/neo.js');

  ls = function(id) {
    return neo.cypher({
      query: "MATCH (n)\nWHERE id(n) = " + id + "\nOPTIONAL MATCH (n)-[:SUBNODE]->(c)\nRETURN n AS node, id(n) AS id, labels(n) AS labels, n:AuxFolder OR count(c) > 0 AS is_folder",
      callback: function(error, data) {
        var cwd, objects;
        if (error) {
          throw error;
        }
        objects = neo.as_objects(data);
        if (objects.length === 0) {
          throw new Error('Not found (should return 404)');
        }
        cwd = objects[0];
        return neo.cypher({
          query: ("START cwd=node(" + id + ")\nMATCH (cwd)-[:SUBNODE]->(n)\nOPTIONAL MATCH (n)-[:SUBNODE]->(c)\nRETURN n AS node, id(n) AS id, labels(n) AS labels, n:AuxFolder OR count(c) > 0 AS is_folder\nORDER BY LOWER(n.label) ASC") + (cwd.node.autoquery != null ? ' UNION ' + cwd.node.autoquery + ' ' + "OPTIONAL MATCH (n)-[:SUBNODE]->(c)\nRETURN n AS node, id(n) AS id, labels(n) AS labels, n:AuxFolder OR count(c) > 0 AS is_folder\nORDER BY LOWER(n.label) ASC" : ''),
          callback: function(error, data) {
            var result, subnodes;
            if (error) {
              throw error;
            }
            subnodes = neo.as_objects(data);
            response.headers['Content-Type'] = 'application/json';
            result = {
              cwd: cwd,
              subnodes: subnodes
            };
            return write(JSON.stringify(result));
          }
        });
      }
    });
  };

  ls(request.query.cwd);

}).call(this);
