// Generated by CoffeeScript 1.10.0
(function() {
  var camelify, clavius_search, redraw_boxes, redraw_docs, wikidata_search,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  d3.select('#search_panel input').on('keydown', function() {
    if (d3.event.keyCode === 13) {
      return wikidata_search(this.value);
    }
  });

  d3.select('#search_button').on('click', function() {
    var user_input;
    user_input = d3.select('#search_panel input').node().value;
    return wikidata_search(user_input);
  });

  wikidata_search = function(user_input) {
    return d3.json("api/wikidata.php?text=" + user_input, function(err_1, wd_data) {
      var index, query;
      query = JSON.stringify(wd_data.map(function(d) {
        return {
          uri: "http://www.wikidata.org/entity/" + d.id
        };
      }));
      index = {};
      wd_data.forEach(function(d) {
        return index[d.id] = d;
      });
      return d3.json("http://wafi.iit.cnr.it:33065/ClaviusWeb-1.0.3/ClaviusSearch/count").post(query, function(err_2, cs_data) {
        return redraw_boxes((cs_data.filter(function(d) {
          return d.count > 0;
        })).map(function(d) {
          index[d.uri.split('/').slice(-1)].count = d.count;
          return index[d.uri.split('/').slice(-1)];
        }));
      });
    });
  };

  clavius_search = function(uri) {
    var query;
    query = '{luceneQuery: "concept:\\"' + uri + '\\""}';
    return d3.json('http://wafi.iit.cnr.it:33065/ClaviusWeb-1.0.3/ClaviusSearch/search').post(query, function(err, data) {
      return redraw_docs(data);
    });
  };

  camelify = function(str) {
    var camel_str, char, i, index, len, upper_char_index;
    camel_str = "";
    upper_char_index = [];
    for (index = i = 0, len = str.length; i < len; index = ++i) {
      char = str[index];
      if (char === ['-']) {
        upper_char_index.push(index + 1);
      } else if (indexOf.call(upper_char_index, index) >= 0) {
        camel_str += char.toUpperCase();
      } else {
        camel_str += char;
      }
    }
    return camel_str;
  };

  redraw_boxes = function(data) {
    var count, enter_results, resource, results;
    results = d3.select('#boxes').selectAll('.box').data(data, function(d) {
      return d.concepturi;
    });
    enter_results = results.enter().append('div').attr({
      "class": 'box'
    }).on('click', function(d) {
      return clavius_search(d.concepturi);
    });
    results.order();
    resource = enter_results.append('div').attr({
      "class": 'resource'
    });
    resource.html(function(d) {
      return "<span class='label'>" + d.label + "</span> <span>(<a target='_blank' class='link' href='" + d.concepturi + "'>" + d.id + "</a>)</span><div class='description'>" + d.description + "</div>";
    });
    count = enter_results.append('div').attr({
      "class": 'count'
    }).text(function(d) {
      return d.count;
    });
    return results.exit().remove();
  };

  redraw_docs = function(data) {
    var aggregated_data, annotations, container, match, results;
    d3.select('#docs').html("");
    container = d3.select('#docs');
    aggregated_data = d3.nest().key(function(d) {
      return d.idDoc;
    }).entries(data);
    results = container.selectAll('.doc').data(aggregated_data);
    results.enter().append('div').attr({
      "class": 'doc'
    });
    results.append('div').attr({
      "class": 'label'
    }).text(function(d) {
      return d.key;
    });
    match = results.append('div').attr({
      "class": 'annotations'
    });
    annotations = match.selectAll('.annotation').data(function(d) {
      return d.values;
    });
    annotations.enter().append('div').attr({
      "class": 'annotation'
    });
    return annotations.html(function(d) {
      return "..." + (d.leftContext.replace(/\n/g, '<br>')) + " <span class='matched'>" + (d.matched.replace(/\n/g, '<br>')) + "</span> " + (d.rightContext.replace(/\n/g, '<br>')) + "...";
    });
  };

}).call(this);
